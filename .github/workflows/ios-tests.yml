name: iOS Unit Tests

on:
  push:
    branches:
      - feature/ios-scaffold
    paths:
      - 'ios-app/**'
  pull_request:
    branches:
      - feature/ios-scaffold
    paths:
      - 'ios-app/**'

jobs:
  build-and-test:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby (for xcpretty)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.x'

      - name: Install xcpretty
        run: |
          gem install xcpretty -v 0.3.0 --no-document

      - name: Restore DerivedData cache
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Show Xcode versions
        run: xcodebuild -version

      - name: Run unit tests (with fallbacks and diagnostics)
        env:
          PROJECT: ${{ env.PROJECT }}
          SCHEME: ${{ env.SCHEME }}
        run: |
          set -euo pipefail
          PROJECT_PATH=${PROJECT:-"ios-app/Mood.xcodeproj"}
          SCHEME_NAME=${SCHEME:-"Mood"}

          echo "Looking for project at: $PROJECT_PATH"
          if [ ! -e "$PROJECT_PATH" ]; then
            echo "Project not found at $PROJECT_PATH. Listing repo root:"
            ls -la
            exit 1
          fi

          DESTINATIONS=(
            "platform=iOS Simulator,name=iPhone 14,OS=17.0"
            "platform=iOS Simulator,name=iPhone 14,OS=16.4"
          )

          # Try destinations until one succeeds
          SUCCESS=0
          for DEST in "${DESTINATIONS[@]}"; do
            echo "Trying destination: $DEST"
            # capture raw xcodebuild output for diagnostics
            TIMESTAMP=$(date +%s)
            LOGFILE="xcodebuild-$TIMESTAMP.log"
            if xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME_NAME" -sdk iphonesimulator -destination "$DEST" clean test 2>&1 | tee "$LOGFILE" | xcpretty -r junit --output "test-results-$TIMESTAMP.xml"; then
              echo "Tests passed on destination: $DEST"
              SUCCESS=1
              break
            else
              echo "Tests failed on destination: $DEST; saving $LOGFILE"
              mkdir -p ./ci-artifacts
              mv "$LOGFILE" ./ci-artifacts/ || true
              mv "test-results-$TIMESTAMP.xml" ./ci-artifacts/ || true
            fi
          done

          if [ "$SUCCESS" -ne 1 ]; then
            echo "All destinations failed. Uploading artifacts for diagnosis."
            ls -la ./ci-artifacts || true
            exit 1
          fi

      - name: Upload test artifacts (logs)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-artifacts
          path: ./ci-artifacts
